/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  '/': {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  '/lists': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.lists.id'];
          userId?: parameters['rowFilter.lists.userId'];
          label?: parameters['rowFilter.lists.label'];
          date?: parameters['rowFilter.lists.date'];
          createdAt?: parameters['rowFilter.lists.createdAt'];
          updatedAt?: parameters['rowFilter.lists.updatedAt'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['lists'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** lists */
          lists?: definitions['lists'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.lists.id'];
          userId?: parameters['rowFilter.lists.userId'];
          label?: parameters['rowFilter.lists.label'];
          date?: parameters['rowFilter.lists.date'];
          createdAt?: parameters['rowFilter.lists.createdAt'];
          updatedAt?: parameters['rowFilter.lists.updatedAt'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.lists.id'];
          userId?: parameters['rowFilter.lists.userId'];
          label?: parameters['rowFilter.lists.label'];
          date?: parameters['rowFilter.lists.date'];
          createdAt?: parameters['rowFilter.lists.createdAt'];
          updatedAt?: parameters['rowFilter.lists.updatedAt'];
        };
        body: {
          /** lists */
          lists?: definitions['lists'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/todos': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.todos.id'];
          text?: parameters['rowFilter.todos.text'];
          isComplete?: parameters['rowFilter.todos.isComplete'];
          userId?: parameters['rowFilter.todos.userId'];
          listId?: parameters['rowFilter.todos.listId'];
          createdAt?: parameters['rowFilter.todos.createdAt'];
          updatedAt?: parameters['rowFilter.todos.updatedAt'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['todos'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** todos */
          todos?: definitions['todos'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.todos.id'];
          text?: parameters['rowFilter.todos.text'];
          isComplete?: parameters['rowFilter.todos.isComplete'];
          userId?: parameters['rowFilter.todos.userId'];
          listId?: parameters['rowFilter.todos.listId'];
          createdAt?: parameters['rowFilter.todos.createdAt'];
          updatedAt?: parameters['rowFilter.todos.updatedAt'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.todos.id'];
          text?: parameters['rowFilter.todos.text'];
          isComplete?: parameters['rowFilter.todos.isComplete'];
          userId?: parameters['rowFilter.todos.userId'];
          listId?: parameters['rowFilter.todos.listId'];
          createdAt?: parameters['rowFilter.todos.createdAt'];
          updatedAt?: parameters['rowFilter.todos.updatedAt'];
        };
        body: {
          /** todos */
          todos?: definitions['todos'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
};

export type definitions = {
  lists: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: uuid */
    userId: string;
    /** Format: text */
    label: string;
    /** Format: date */
    date: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    createdAt: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    updatedAt: string;
  };
  todos: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    text: string;
    /**
     * Format: boolean
     * @default false
     */
    isComplete: boolean;
    /** Format: uuid */
    userId: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `lists.id`.<fk table='lists' column='id'/>
     */
    listId: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    createdAt: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updatedAt: string;
  };
};

export type parameters = {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: 'params=single-object';
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: 'return=representation' | 'return=minimal' | 'return=none';
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: 'count=none';
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description lists */
  'body.lists': definitions['lists'];
  /** Format: uuid */
  'rowFilter.lists.id': string;
  /** Format: uuid */
  'rowFilter.lists.userId': string;
  /** Format: text */
  'rowFilter.lists.label': string;
  /** Format: date */
  'rowFilter.lists.date': string;
  /** Format: timestamp with time zone */
  'rowFilter.lists.createdAt': string;
  /** Format: timestamp with time zone */
  'rowFilter.lists.updatedAt': string;
  /** @description todos */
  'body.todos': definitions['todos'];
  /** Format: uuid */
  'rowFilter.todos.id': string;
  /** Format: text */
  'rowFilter.todos.text': string;
  /** Format: boolean */
  'rowFilter.todos.isComplete': string;
  /** Format: uuid */
  'rowFilter.todos.userId': string;
  /** Format: uuid */
  'rowFilter.todos.listId': string;
  /** Format: timestamp with time zone */
  'rowFilter.todos.createdAt': string;
  /** Format: timestamp with time zone */
  'rowFilter.todos.updatedAt': string;
};

export type operations = {};

export type external = {};
